// IAuthor.cs
using System;
using System.Collections.Generic;

public interface IAuthor
{
    void AddAuthor(Author author);
    void EditAuthor(Guid authorId, Author updatedAuthor);
    void DeleteAuthor(Guid authorId);
    void AddProductToAuthor(Guid authorId, Product product);
    void RemoveProductFromAuthor(Guid authorId, Guid productId);
    Author GetAuthorInfo(Guid authorId);
}
// Author.cs
using System;
using System.Collections.Generic;
using System.Linq;

public enum Sex { Male, Female }
public enum Country { USA, UK, Germany, France, Georgia }
public enum City { Tbilisi, London, Berlin, Paris, NewYork }

public class Author : IComparable<Author>
{
    public Guid Id { get; private set; }
    public string Name { get; set; }
    public string Surname { get; set; }
    public Sex Gender { get; set; }
    public string PersonalID { get; set; }
    public DateTime Birthdate { get; set; }
    public Country Country { get; set; }
    public City City { get; set; }
    public string PhoneNumber { get; set; }
    public string Email { get; set; }
    public List<Product> Products { get; set; }

    public Author(string name, string surname, Sex gender, string personalId, DateTime birthdate,
                  Country country, City city, string phoneNumber, string email)
    {
        Id = Guid.NewGuid();
        Name = ValidateString(name, 2, 50);
        Surname = ValidateString(surname, 2, 50);
        Gender = gender;
        PersonalID = ValidatePersonalID(personalId);
        Birthdate = ValidateAge(birthdate);
        Country = country;
        City = city;
        PhoneNumber = ValidateString(phoneNumber, 4, 50);
        Email = ValidateEmail(email);
        Products = new List<Product>();
    }

    private string ValidateString(string value, int min, int max)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < min || value.Length > max)
            throw new ArgumentException($"Value must be between {min}-{max} characters.");
        return value;
    }

    private string ValidatePersonalID(string id)
    {
        if (id.Length != 11 || !id.All(char.IsDigit))
            throw new ArgumentException("ID უნდა იყოს ზუსტად 11 ციფრი");
        return id;
    }

    private DateTime ValidateAge(DateTime birthdate)
    {
        if ((DateTime.Now - birthdate).TotalDays / 365 < 18)
            throw new ArgumentException("ავტორი უნდა იყოს მინიმუმ 18 წლის");
        return birthdate;
    }

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains('@') || !email.Contains('.'))
            throw new ArgumentException("არასწორი იმეილის ფორმატი");
        return email;
    }

    public int CompareTo(Author other) => other.Birthdate.CompareTo(this.Birthdate); // Descending order by age
}

// Product.cs
using System;
using System.Linq;

public enum ProductType { Book, Article, Blog }
public enum Publishing { OxfordPress, CambridgePress, SelfPublished }

public class Product
{
    public Guid Id { get; private set; }
    public string Title { get; set; }
    public string Anotation { get; set; }
    public ProductType Type { get; set; }
    public string ISBN { get; set; }
    public DateTime ReleaseDate { get; set; }
    public Publishing Publisher { get; set; }
    public int PageAmount { get; set; }
    public string Address { get; set; }

    public Product(string title, string anotation, ProductType type, string isbn, DateTime releaseDate,
                   Publishing publisher, int pageAmount, string address)
    {
        Id = Guid.NewGuid();
        Title = ValidateString(title, 2, 250);
        Anotation = ValidateString(anotation, 100, 250);
        Type = type;
        ISBN = ValidateISBN(isbn);
        ReleaseDate = releaseDate;
        Publisher = publisher;
        PageAmount = pageAmount;
        Address = address;
    }

    private string ValidateString(string value, int min, int max)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < min || value.Length > max)
            throw new ArgumentException($"Value must be between {min}-{max} characters.");
        return value;
    }

    private string ValidateISBN(string isbn)
    {
        if (isbn.Length != 13 || !isbn.All(char.IsDigit))
            throw new ArgumentException("ISBN must be exactly 13 digits.");
        return isbn;
    }
}

// ProductComparer.cs
using System.Collections.Generic;

public class ProductComparer : IComparer<Product>
{
    public int Compare(Product x, Product y)
    {
        return x.PageAmount.CompareTo(y.PageAmount); // Ascending order by page amount
    }
}
// PressHouse.cs
using System;
using System.Collections.Generic;
using System.Linq;

public class PressHouse : IAuthor
{
    private List<Author> authors = new List<Author>();
    private List<Product> products = new List<Product>();

    public void AddAuthor(Author author) => authors.Add(author);
    
    public void EditAuthor(Guid authorId, Author updatedAuthor)
    {
        var author = authors.FirstOrDefault(a => a.Id == authorId);
        if (author != null)
        {
            author.Name = updatedAuthor.Name;
            author.Surname = updatedAuthor.Surname;
            author.Gender = updatedAuthor.Gender;
            author.PersonalID = updatedAuthor.PersonalID;
            author.Birthdate = updatedAuthor.Birthdate;
            author.Country = updatedAuthor.Country;
            author.City = updatedAuthor.City;
            author.PhoneNumber = updatedAuthor.PhoneNumber;
            author.Email = updatedAuthor.Email;
            author.Products = updatedAuthor.Products;
        }
        else
        {
            throw new ArgumentException("Author not found.");
        }
    }

    public void DeleteAuthor(Guid authorId)
    {
        var author = authors.FirstOrDefault(a => a.Id == authorId);
        if (author != null)
        {
            authors.Remove(author);
        }
        else
        {
            throw new ArgumentException("Author not found.");
        }
    }

    public void AddProductToAuthor(Guid authorId, Product product)
    {
        var author = authors.FirstOrDefault(a => a.Id == authorId);
        if (author != null)
        {
            author.Products.Add(product);
        }
        else
        {
            throw new ArgumentException("Author not found.");
        }
    }

    public void RemoveProductFromAuthor(Guid authorId, Guid productId)
    {
        var author = authors.FirstOrDefault(a => a.Id == authorId);
        if (author != null)
        {
            var product = author.Products.FirstOrDefault(p => p.Id == productId);
            if (product != null)
            {
                author.Products.Remove(product);
            }
            else
            {
                throw new ArgumentException("Product not found.");
            }
        }
        else
        {
            throw new ArgumentException("Author not found.");
        }
    }

    public Author GetAuthorInfo(Guid authorId)
    {
        var author = authors.FirstOrDefault(a => a.Id == authorId);
        if (author == null)
        {
            throw new ArgumentException("Author not found.");
        }
        return author;
    }

    public void AddProduct(Product product) => products.Add(product);

    public List<Product> GetProductsByDateRange(DateTime start, DateTime end)
    {
        return products.Where(p => p.ReleaseDate >= start && p.ReleaseDate <= end).ToList();
    }

    public List<Product> GetTopMProducts(int m)
    {
        return products.OrderByDescending(p => p.PageAmount).Take(m).ToList();
    }

    public Dictionary<ProductType, int> GetYearlyReport(int year)
    {
        var report = new Dictionary<ProductType, int> { { ProductType.Book, 0 }, { ProductType.Article, 0 }, { ProductType.Blog, 0 } };

        foreach (var product in products.Where(p => p.ReleaseDate.Year == year))
        {
            report[product.Type]++;
        }

        return report;
    }
}


// Program.cs
using System;

class Program
{
    static void Main()
    {
        PressHouse pressHouse = new PressHouse();

        Author author1 = new Author("Giorgi", "Mikautadze", Sex.Male, "12345678901", new DateTime(1985, 5, 10), "Georgia", "Tbilisi", "12345678", "giorgi.mikautadze@example.com");
        Product book1 = new Product("Scoring", "A book about Scoring Goals", ProductType.Book, "1234567890123", new DateTime(2025, 5, 10), Publishing.OxfordPress, 500, "Library A");

        Author author2 = new Author("Lana", "Del Rey", Sex.Female, "98765432109", new DateTime(1990, 8, 15), Country.UK, City.London, "98765432", "lana.delrey@example.com");
        Product book2 = new Product("Singing", "A how to sing tutorial", ProductType.Book, "9876543210123", new DateTime(2025, 7, 20), Publishing.CambridgePress, 300, "Library B");

        pressHouse.AddAuthor(author1);
        pressHouse.AddProduct(book1);

        pressHouse.AddAuthor(author2);
        pressHouse.AddProduct(book2);

        Console.WriteLine("Top 1 product:");
        foreach (var p in pressHouse.GetTopMProducts(1))
        {
            Console.WriteLine($"Title: {p.Title}, Pages: {p.PageAmount}");
        }
        Console.WriteLine("\nYearly Report for 2025:");
        var report = pressHouse.GetYearlyReport(2025);
        foreach (var item in report)
        {
            Console.WriteLine($"{item.Key}: {item.Value}");
        }
    }
}
