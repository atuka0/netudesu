// 1.Program Cs
using Microsoft.EntityFrameworkCore;
using MyWebApiProject.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<DatabaseContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("MainConnection")));

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();

app.MapControllers();

app.Run();








//2.Models/MobileContact.cs
using System.ComponentModel.DataAnnotations;

namespace MyWebApiProject.Models
{
    public class MobileContact
    {
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }

        [Required]
        public string PhoneNumber { get; set; }

        [EmailAddress]
        public string? Email { get; set; }
    }
}










//3.Data/DatabaseContext.cs
using Microsoft.EntityFrameworkCore;
using MyWebApiProject.Models;

namespace MyWebApiProject.Data
{
    public class DatabaseContext : DbContext
    {
        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options) { }

        public DbSet<MobileContact> MobileContacts { get; set; }
    }
}










//4.DTOs/AddContactDto.cs
using System.ComponentModel.DataAnnotations;

namespace MyWebApiProject.DTOs
{
    public class AddContactDto
    {
        [Required]
        public string Name { get; set; }

        [Required]
        public string PhoneNumber { get; set; }

        [EmailAddress]
        public string? Email { get; set; }
    }
}








//5. DTOs/UpdateContactDto.cs
using System.ComponentModel.DataAnnotations;

namespace MyWebApiProject.DTOs
{
    public class UpdateContactDto
    {
        [Required]
        public string Name { get; set; }

        [Required]
        public string PhoneNumber { get; set; }

        [EmailAddress]
        public string? Email { get; set; }
    }
}










//6.Controllers/MobileContactController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MyWebApiProject.Data;
using MyWebApiProject.DTOs;
using MyWebApiProject.Models;

namespace MyWebApiProject.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class MobileContactController : ControllerBase
    {
        private readonly DatabaseContext _context;

        public MobileContactController(DatabaseContext context)
        {
            _context = context;
        }

        // GET: api/MobileContact
        [HttpGet]
        public async Task<ActionResult<IEnumerable<MobileContact>>> GetAllContacts()
        {
            return Ok(await _context.MobileContacts.ToListAsync());
        }

        // GET: api/MobileContact/5
        [HttpGet("{id}")]
        public async Task<ActionResult<MobileContact>> GetContactById(int id)
        {
            var contact = await _context.MobileContacts.FindAsync(id);

            if (contact == null)
            {
                return NotFound();
            }

            return Ok(contact);
        }

        // POST: api/MobileContact
        [HttpPost]
        public async Task<ActionResult<MobileContact>> AddContact(AddContactDto contactDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var contact = new MobileContact
            {
                Name = contactDto.Name,
                PhoneNumber = contactDto.PhoneNumber,
                Email = contactDto.Email
            };

            _context.MobileContacts.Add(contact);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetContactById), new { id = contact.Id }, contact);
        }

        // PUT: api/MobileContact/5
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateContact(int id, UpdateContactDto contactDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var contact = await _context.MobileContacts.FindAsync(id);

            if (contact == null)
            {
                return NotFound();
            }

            contact.Name = contactDto.Name;
            contact.PhoneNumber = contactDto.PhoneNumber;
            contact.Email = contactDto.Email;

            await _context.SaveChangesAsync();

            return NoContent();
        }

        // DELETE: api/MobileContact/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteContact(int id)
        {
            var contact = await _context.MobileContacts.FindAsync(id);

            if (contact == null)
            {
                return NotFound();
            }

            _context.MobileContacts.Remove(contact);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // GET: api/MobileContact/search?name=John
        [HttpGet("search")]
        public async Task<ActionResult<IEnumerable<MobileContact>>> SearchContactsByName([FromQuery] string name)
        {
            var contacts = await _context.MobileContacts
                .Where(c => c.Name.Contains(name))
                .ToListAsync();

            return Ok(contacts);
        }
    }
}




//7.appsettings.json
{
  "ConnectionStrings": {
    "MainConnection": "Data Source=mobilecontacts.db"
  }
}








//8.MyWebApiProject.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>

</Project>











//tools add packages
Microsoft.EntityFrameworkCore.Sqlite
Microsoft.EntityFrameworkCore.Tools
Swashbuckle.AspNetCore











//from terminal run 
dotnet ef migrations add InitialCreate
dotnet ef database update

