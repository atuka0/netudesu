const express = require('express');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs');

dotenv.config();

const app = express();
app.use(express.json());


app.use(express.static(path.join(__dirname, 'MyApp')));

const users = [
  { username: 'user1', password: 'password1' },
  { username: 'user2', password: 'password2' }
];

let posts = [];

function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).send('No token');

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).send('Invalid token');
    req.user = user;
    next();
  });
}

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).json({ error: 'Invalid credentials' });

  const token = jwt.sign({ username }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

app.get('/posts', authenticateToken, (req, res) => {
  res.json(posts);
});

app.post('/posts', authenticateToken, (req, res) => {
  const { title, content } = req.body;
  if (!title || !content) return res.status(400).json({ error: 'Missing title/content' });

  posts.push({ title, content });
  res.status(201).json({ message: 'Post Created' });
});

const PORT = process.env.PORT || 5321;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});



const loginBtn = document.getElementById('loginBtn');
const createBtn = document.getElementById('createPostBtn');
const postsDiv = document.getElementById('postsList');

const token = () => localStorage.getItem('token');

loginBtn.onclick = async () => {
  const user = document.getElementById('username').value;
  const pass = document.getElementById('password').value;
  const res = await fetch('/login', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({username: user, password: pass})
  });
  if (res.ok) {
    const { token: t } = await res.json();
    localStorage.setItem('token', t);
    alert('Logged in!');
    loadPosts();
  } else alert('Login failed');
};


async function loadPosts() {
  const res = await fetch('/posts', {
    headers: { Authorization: 'Bearer ' + token() }
  });
  if (!res.ok) return alert('Cannot load posts');
  const data = await res.json();
  postsDiv.innerHTML = data.map(p =>
    `<div><h3>${p.title}</h3><p>${p.content}</p></div>`
  ).join('');
}

createBtn.onclick = async () => {
  const title = document.getElementById('postTitle').value;
  const content = document.getElementById('postContent').value;
  const res = await fetch('/posts', {
    method: 'POST',
    headers: {
      'Content-Type':'application/json',
      Authorization: 'Bearer ' + token()
    },
    body: JSON.stringify({title, content})
  });
  if (res.ok) {
    alert('Post created!');
    loadPosts();
  } else alert('Create failed');
};








